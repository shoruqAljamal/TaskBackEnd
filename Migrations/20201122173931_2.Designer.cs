// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskBackEnd.Context;

namespace TaskBackEnd.Migrations
{
    [DbContext(typeof(BankContext))]
    [Migration("20201122173931_2")]
    partial class _2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("TaskBackEnd.Entites.Account", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AccountTypeId = 1,
                            Amount = 2000.0,
                            CurrencyId = 1,
                            CustomerId = 1,
                            Number = 3588
                        },
                        new
                        {
                            ID = 2,
                            AccountTypeId = 2,
                            Amount = 3000.0,
                            CurrencyId = 1,
                            CustomerId = 1,
                            Number = 3589
                        },
                        new
                        {
                            ID = 3,
                            AccountTypeId = 3,
                            Amount = 5000.0,
                            CurrencyId = 2,
                            CustomerId = 1,
                            Number = 3590
                        },
                        new
                        {
                            ID = 4,
                            AccountTypeId = 1,
                            Amount = 5000.0,
                            CurrencyId = 2,
                            CustomerId = 2,
                            Number = 3591
                        });
                });

            modelBuilder.Entity("TaskBackEnd.Entites.AccountType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("AccountTypes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Savings Accounts"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Current Accounts"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Certificates of Deposites"
                        });
                });

            modelBuilder.Entity("TaskBackEnd.Entites.Currency", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "USD"
                        },
                        new
                        {
                            ID = 2,
                            Name = "NIS"
                        },
                        new
                        {
                            ID = 3,
                            Name = "EUR"
                        });
                });

            modelBuilder.Entity("TaskBackEnd.Entites.CurrencyRatio", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("FromCurrencyId")
                        .HasColumnType("int");

                    b.Property<double>("Ratio")
                        .HasColumnType("float");

                    b.Property<int>("ToCurrencyId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("CurrenciesRatio");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            FromCurrencyId = 1,
                            Ratio = 3.5,
                            ToCurrencyId = 2
                        },
                        new
                        {
                            ID = 2,
                            FromCurrencyId = 2,
                            Ratio = 0.28599999999999998,
                            ToCurrencyId = 1
                        },
                        new
                        {
                            ID = 3,
                            FromCurrencyId = 1,
                            Ratio = 1.1899999999999999,
                            ToCurrencyId = 3
                        },
                        new
                        {
                            ID = 4,
                            FromCurrencyId = 3,
                            Ratio = 0.83999999999999997,
                            ToCurrencyId = 1
                        },
                        new
                        {
                            ID = 5,
                            FromCurrencyId = 2,
                            Ratio = 3.9767100000000002,
                            ToCurrencyId = 3
                        },
                        new
                        {
                            ID = 6,
                            FromCurrencyId = 3,
                            Ratio = 0.25146400000000002,
                            ToCurrencyId = 2
                        });
                });

            modelBuilder.Entity("TaskBackEnd.Entites.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Totalmony")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CurrencyId = 1,
                            Name = "Anas",
                            Totalmony = 9430.0
                        },
                        new
                        {
                            ID = 2,
                            CurrencyId = 1,
                            Name = "Shorouq",
                            Totalmony = 245.38800000000001
                        });
                });

            modelBuilder.Entity("TaskBackEnd.Entites.Operation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Operations");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Transfer"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Deposite"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Withdraw"
                        });
                });

            modelBuilder.Entity("TaskBackEnd.Entites.Transaction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("FromAccountId")
                        .HasColumnType("int");

                    b.Property<int>("OperationId")
                        .HasColumnType("int");

                    b.Property<int>("ToAccountId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AccountId");

                    b.HasIndex("OperationId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("TaskBackEnd.Entites.Account", b =>
                {
                    b.HasOne("TaskBackEnd.Entites.AccountType", "AccountType")
                        .WithMany()
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TaskBackEnd.Entites.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TaskBackEnd.Entites.Customer", "Customer")
                        .WithMany("Accounts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AccountType");

                    b.Navigation("Currency");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("TaskBackEnd.Entites.Customer", b =>
                {
                    b.HasOne("TaskBackEnd.Entites.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("TaskBackEnd.Entites.Transaction", b =>
                {
                    b.HasOne("TaskBackEnd.Entites.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TaskBackEnd.Entites.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("TaskBackEnd.Entites.Account", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("TaskBackEnd.Entites.Customer", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
